{"version":3,"sources":["components/Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","onClickAddTask","validatedTitle","trim","addTask","todolistId","errorMessage","className","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyPress","key","tasks","map","t","isDone","type","newTaskStatus","checked","changeTaskStatus","id","removeTask","filter","changeTodolistFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","tl","task","taskId","newIsDone","copyTasks","tasksForTodolist","getFilteredTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0149fe6d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterType, TaskType} from '../App';\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTodolistFilter: (value: FilterType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const [title, setTitle] = useState<string>('')              //храним значения введенные в input при добавлении\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onClickAddTask = () => {                                         // добавление таски\r\n        const validatedTitle = title.trim()\r\n        if (validatedTitle !== '') {                                   // проверка на отрисовку ошибки при добавлении таски\r\n            props.addTask(validatedTitle, props.todolistId);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    }\r\n    const onChangeClickHandler = (e: ChangeEvent<HTMLInputElement>) => {         // добавление таски при нажатии мышкой на +\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {                //добавление таски при нажатии Enter\r\n        setError(false);\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask();\r\n        }\r\n    }\r\n\r\n\r\n    const onClickDeleteTodolist = () => {props.removeTodolist(props.todolistId)\r\n    }\r\n    const onClickSetAllFilter = () => {\r\n        props.changeTodolistFilter('all', props.todolistId)\r\n    }\r\n    const onClickSetActiveFilter = () => {\r\n        props.changeTodolistFilter('active', props.todolistId)\r\n    }\r\n    const onClickSetCompletedFilter = () => {\r\n        props.changeTodolistFilter('completed', props.todolistId)\r\n    }\r\n\r\n    const errorMessage = error && <div className=\"error-message\">{'Title is required'}</div>   //сообщение при добавлении\r\n    //пустой строки\r\n    return (\r\n        <div>\r\n            <h3> {props.title}\r\n            <button onClick={onClickDeleteTodolist}> X </button>\r\n            </h3>\r\n            <div>\r\n                <input value={title}\r\n                       onChange={onChangeClickHandler}\r\n                       onKeyPress={onKeyPress}\r\n                       className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={onClickAddTask}> +</button>\r\n                {errorMessage}\r\n            </div>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                            const deleteTask = () => {\r\n                                props.removeTask(t.id, props.todolistId)\r\n                            }\r\n                            const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newTaskStatus = e.currentTarget.checked;\r\n                                props.changeTaskStatus(t.id, newTaskStatus, props.todolistId);\r\n                            }\r\n\r\n                            return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <input type=\"checkbox\"\r\n                                       onChange={onChangeTaskStatus}\r\n                                       checked={t.isDone}/>\r\n                                <span>{t.title}</span>\r\n                                <button onClick={deleteTask}>X\r\n                                </button>\r\n                            </li>\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                        onClick={onClickSetAllFilter}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onClickSetActiveFilter}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={onClickSetCompletedFilter}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Todolist} from './components/Todolist';\nimport {v1} from 'uuid';\n\nexport type FilterType = 'all' | 'active' | 'completed'\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\nfunction App() {\n\nconst todolistId1 = v1();\nconst todolistId2 = v1();\n\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\n        {id: todolistId1, title: 'What to buy', filter: 'all'},\n        {id: todolistId2, title: 'What to learn', filter: 'all'}\n    ])\n\n    const [tasks, setTasks] = useState<TasksStateType>({\n        [todolistId1]: [\n            {id: v1(), title: 'Milk', isDone: true},\n            {id: v1(), title: 'Chocolate', isDone: true},\n            {id: v1(), title: 'Butter', isDone: false},\n        ],\n        [todolistId2]: [\n            {id: v1(), title: 'HTML', isDone: true},\n            {id: v1(), title: 'CSS', isDone: true},\n            {id: v1(), title: 'React', isDone: false},\n            {id: v1(), title: 'Redux', isDone: false}\n        ]\n    })\n    function changeTodolistFilter (value: FilterType, todolistId: string) {        //отрисовываем отфильтрованные таски\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter: value} : tl));   //в тудулистах\n    }\n\n\n    function removeTask (id: string, todolistId: string) {                          // удаление таски в тудулисте\n        tasks[todolistId] = tasks[todolistId].filter(t => t.id !== id)\n        setTasks({...tasks});\n    }\n\n\n    function addTask (title: string, todolistId: string) {\n        let task = {                                        //создаем обьект - новую таску\n            id: v1(),\n            title: title,\n            isDone: false\n        }\n\n         tasks[todolistId] = [task, ...tasks[todolistId]];                     //в переменную записываем массив тасок\n        setTasks({...tasks});                                  //отрисовываем новый массив\n    }\n\nfunction changeTaskStatus (taskId: string, newIsDone: boolean, todolistId: string) {\n        const copyTasks = {...tasks}\n    copyTasks[todolistId]  = tasks[todolistId].map(t => t.id === taskId ? {...t, isDone: newIsDone} : t)\n    setTasks(copyTasks);\n}\n\nfunction removeTodolist (todolistId: string) {\nsetTodolists(todolists.filter(tl => tl.id !== todolistId))\n    const copyTasks = {...tasks}\n    delete copyTasks[todolistId]\n    setTasks(copyTasks)\n}\n\n    function getFilteredTask (tl: TodolistType) {                    //фильтрование тасок\n        switch (tl.filter) {\n            case('active'):\n                return tasks[tl.id].filter(t => !t.isDone);\n            case('completed'):\n                return tasks[tl.id].filter(t => t.isDone);\n            default:\n                return tasks[tl.id];\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            {\n                todolists.map(tl => {\n                    let tasksForTodolist = getFilteredTask(tl);\n                    return <Todolist\n                       // key={tl.id}\n                        title={tl.title}\n                        tasks={tasksForTodolist}\n                        filter={tl.filter}\n                        todolistId={tl.id}\n                        removeTask={removeTask}\n                        changeTodolistFilter={changeTodolistFilter}\n                        addTask={addTask}\n                        changeTaskStatus={changeTaskStatus}\n                        removeTodolist={removeTodolist}\n                    />\n                })\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}