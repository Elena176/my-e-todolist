{"version":3,"sources":["components/Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","onClickAddTask","trim","addTask","errorMessage","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","tasks","map","t","isDone","type","newTaskStatus","checked","changeTaskStatus","id","removeTask","filter","changeTaskFilter","App","v1","setTasks","setFilter","tasksForTodoList","getFilteredTask","filteredTasks","newTask","taskId","newIsDone","newCopyTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bb17363.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterType, TaskType} from '../App';\r\n\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (id: string) => void\r\n    changeTaskFilter: (value: FilterType) => void\r\n    addTask: (title: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDone: boolean) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const [title, setTitle] = useState<string>('')              //храним значения введенные в input при добавлении\r\n    const [error, setError] = useState<boolean>(false);\r\n    const onClickAddTask = () => {                                      // добавление таски\r\n        if (title.trim() !== '') {                                   // проверка на отрисовку ошибки при добавлении таски\r\n            props.addTask(title.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    }\r\n    const onChangeClickHandler = (e: ChangeEvent<HTMLInputElement>) => {         // добавление таски при нажатии мышкой на +\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {                //добавление таски при нажатии Enter\r\n        setError(false);\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask();\r\n        }\r\n    }\r\n\r\n    const onClickSetAllFilter = () => {props.changeTaskFilter('all')}\r\n    const onClickSetActiveFilter = () => {props.changeTaskFilter('active')}\r\n    const onClickSetCompletedFilter = () => {props.changeTaskFilter('completed')}\r\n\r\n    const errorMessage = error && <div className='error-message'>{'Title is required'}</div>   //сообщение при добавлении\r\n                                                                                            //пустой строки\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title}\r\n                       onChange={onChangeClickHandler}\r\n                       onKeyPress={onKeyPress}\r\n                       className={error ? 'error' : ''}\r\n                />\r\n                <button onClick={onClickAddTask}> +</button>\r\n                {errorMessage}\r\n            </div>\r\n            <div>\r\n                {\r\n                props.tasks.map(t => {\r\n                    const deleteTask = () => {props.removeTask(t.id)}\r\n                    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newTaskStatus = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newTaskStatus);\r\n                    }\r\n\r\n                    return  <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                            <input type=\"checkbox\"\r\n                                   onChange={onChangeTaskStatus}\r\n                                   checked={t.isDone}/>\r\n                            <span>{t.title}</span>\r\n                            <button onClick={deleteTask}>X\r\n                            </button>\r\n                        </li>\r\n                    }\r\n                )\r\n            }\r\n            </div>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                        onClick={onClickSetAllFilter}>All</button>\r\n                <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onClickSetActiveFilter}>Active</button>\r\n                <button className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onClickSetCompletedFilter}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Todolist} from './components/Todolist';\nimport {v1} from 'uuid';\n\nexport type FilterType = 'all' | 'active' | 'completed'\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    const [tasks, setTasks] = useState([\n        {id: v1(), title: 'Milk', isDone: true},\n        {id: v1(), title: 'Chocolate', isDone: true},\n        {id: v1(), title: 'Butter', isDone: false},\n    ])\n\n    const [filter, setFilter] = useState<FilterType>('all');\n    function getFilteredTask (filter: string) {                    //фильтрование тасок\n        switch (filter) {\n            case('active'):\n                return tasks.filter(t => t.isDone === false);\n            case('completed'):\n                return tasks.filter(t => t.isDone);\n            default:\n                return tasks;\n        }\n    }\n\n    const tasksForTodoList = getFilteredTask(filter);          //передаем отфильтрованные таски\n    function changeTaskFilter (value: FilterType) {        //отрисовываем отфильтрованные таски\n        setFilter(value);\n    }\n\n    function removeTask (id: string) {                          // удаление таски\n        const filteredTasks = tasks.filter(t => t.id !== id)\n        setTasks(filteredTasks);\n    }\n\n    function addTask (title: string) {                    //добавление в state таски\n        let task = {                                        //создаем обьект - новую таску\n            id: v1(),\n            title: title,\n            isDone: false\n        }\n        let newTask = [task, ...tasks];                     //в переменную записываем массив тасок\n        setTasks(newTask);                                  //отрисовываем новый массив\n    }\n\nfunction changeTaskStatus (taskId: string, newIsDone: boolean) {\n        const newCopyTasks = tasks.map(t => t.id === taskId ? {...t, isDone: newIsDone} : t)\n    setTasks(newCopyTasks);\n}\n\n    return (\n        <div className=\"App\">\n            <Todolist\n                title={'What to buy?'}\n                tasks={tasksForTodoList}\n                filter={filter}\n                removeTask={removeTask}\n                changeTaskFilter={changeTaskFilter}\n                addTask = {addTask}\n                changeTaskStatus={changeTaskStatus}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}